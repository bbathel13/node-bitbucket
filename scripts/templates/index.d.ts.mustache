import { Agent } from 'http'

declare namespace Bitbucket {
  export type Any = any
  export type Object = object

  type AuthBasic = {
    username: string
    password: string
  }

  type AuthToken = {
    token: string
  }

  export type AuthenticateOptions =
    | AuthBasic & { type: "basic" | "apppassword" }
    | AuthToken & { type: "token" }

  export interface Options {
    auth?: AuthBasic | AuthToken
    baseUrl?: string
    notice?: boolean
    request?: {
      agent?: Agent
      timeout?: number
      [key: string]: any
    }
    [option: string]: any
  }

  export type PaginatedResponseData =
    | { next: string; [key:string]: any; }
    | { previous: string; [key:string]: any; }

  type Headers = { [header: string]: string }

  export interface Response<T> {
    data: T
    headers: {
      date: string
      etag: string,
      'x-accepted-oauth-scopes': string
      [header: string]: string
    }
    status: number
    url: string
  }

  export type HTTPError = Error & {
    error?: Schema.Error
    headers?: Headers
    request?: RequestOptions
    status: number
  }

  export type RequestMethod = 'DELETE' | 'GET' | 'POST' | 'PUT'

  export interface EndpointOptions {
    baseUrl?: string
    method?: RequestMethod
    url?: string
    headers?: Headers
    request?: Options['request']
    [param: string]: any
  }

  export interface RequestOptions {
    method?: RequestMethod
    url?: string
    body?: any
    headers?: Headers
    request?: Options['request']
  }

  export interface Endpoint {
    (endpointRoute: string, endpointOptions?: EndpointOptions): RequestOptions
    (endpointOptions: EndpointOptions): RequestOptions
    DEFAULTS: EndpointOptions
    defaults(endpointOptions: EndpointOptions): Endpoint
    merge(endpointRoute: string, endpointOptions?: EndpointOptions): RequestOptions
    merge(endpointOptions: EndpointOptions): RequestOptions
    parse(endpointOptions: EndpointOptions): RequestOptions
  }

  export interface Request {
    (endpointRoute: string, endpointOptions?: EndpointOptions): Promise<Response<Schema.Any>>
    (endpointOptions: EndpointOptions): Promise<Response<Schema.Any>>
    defaults(endpointOptions: EndpointOptions): Request
    endpoint: Bitbucket.Endpoint
  }

  export type Plugin = (client: APIClient, options: Options) => void

  namespace Schema {
    export type Any = Bitbucket.Any

    {{{typesBlob}}}
  }

  namespace Params {
    export interface Empty {}

    {{#namespaces}}
    {{#endpoints}}
    {{^exclude}}
    {{#paramsType}}
    export type {{paramsType}} = {
      {{#params}}
      "{{name}}"{{^required}}?{{/required}}: {{#schema}}Bitbucket.Schema.{{/schema}}{{{type}}}
      {{/params}}
    }
    {{/paramsType}}
    {{/exclude}}
    {{/endpoints}}
    {{/namespaces}}
  }
}

type AsyncResponse<T> = Promise<Bitbucket.Response<T>>

declare interface APIClient {
  hook: {
    before(name: string, callback: (options: Bitbucket.RequestOptions) => void): void
    after(name: string, callback: (response: Bitbucket.Response<Bitbucket.Schema.Any>, options: Bitbucket.RequestOptions) => void): void
    error(name: string, callback: (error: Bitbucket.HTTPError, options: Bitbucket.RequestOptions) => void): void
    wrap(name: string, callback: (request: (options: Bitbucket.RequestOptions) => AsyncResponse<Bitbucket.Schema.Any>, options: Bitbucket.RequestOptions) => void): void
  }

  request: Bitbucket.Request

  hasNextPage(data: Bitbucket.PaginatedResponseData): boolean
  getNextPage<T extends Bitbucket.PaginatedResponseData>(data: T): AsyncResponse<T>
  hasPreviousPage(data: Bitbucket.PaginatedResponseData): boolean
  getPreviousPage<T extends Bitbucket.PaginatedResponseData>(data: T): AsyncResponse<T>

  registerEndpoints(routes: {
    [namespace: string]: {
      [endpointName: string]: Bitbucket.EndpointOptions
    }
  }): void

  {{#namespaces}}
  {{namespace}}: {
    {{#endpoints}}
    {{name}}(params: Bitbucket.Params.{{paramsType}}): AsyncResponse<Bitbucket.Schema.{{responseType}}>
    {{/endpoints}}
  }
  {{/namespaces}}
}

interface APIClientFactory {
  new (options?: Bitbucket.Options): APIClient
  (options?: Bitbucket.Options): APIClient

  plugins(plugins: Bitbucket.Plugin[]): APIClientFactory
}

declare const Bitbucket: APIClientFactory

export = Bitbucket
